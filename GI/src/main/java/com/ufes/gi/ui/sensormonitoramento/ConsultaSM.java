/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.ufes.gi.ui.sensormonitoramento;

import com.ufes.gi.dao.SensorDAO;
import com.ufes.gi.dao.SensorMonitoramento;
import com.ufes.gi.dao.SensorMonitoramentoDAO;
import com.ufes.gi.dao.TipoFalhaDAO;
import com.ufes.gi.dao.TipoMonitoramentoDAO;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;

/**
 *
 * @author joever
 */
public class ConsultaSM extends javax.swing.JInternalFrame {
    List<SensorMonitoramento> mySensores = new ArrayList<>();
    Integer indice = 0;
    Boolean tudoCarregado = false;
    /**
     * Creates new form CadastroRede
     */
    public ConsultaSM() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel3 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtMedia = new javax.swing.JTextField();
        txtDiferenca = new javax.swing.JTextField();
        listaSensor = new javax.swing.JComboBox<>();
        jButton2 = new javax.swing.JButton();

        setClosable(true);
        setTitle("Consultar/Alterar/Excluir Sensor Monitoramento");
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameOpened(evt);
            }
        });

        jLabel3.setText("Sensor/TM/TF: ");

        jButton1.setText("Atualizar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel4.setText("Média de Valores: ");

        jLabel5.setText("Diferença Máxima [%]: ");

        listaSensor.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                listaSensorItemStateChanged(evt);
            }
        });

        jButton2.setText("Excluir");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(listaSensor, 0, 413, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(69, 69, 69)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addGap(30, 30, 30)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtMedia, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel5)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtDiferenca, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(listaSensor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtMedia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(txtDiferenca, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jButton1))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void atualizaSM(SensorMonitoramento mySM){
        SensorMonitoramentoDAO myDAO = new SensorMonitoramentoDAO();
        if (myDAO.atualiza(mySM)){
            tudoCarregado = false;
            indice = listaSensor.getSelectedIndex();
            JOptionPane.showMessageDialog(rootPane, "Definições de Monitoramento e Falha do sensor atualizadas com sucesso!", "Informação", JOptionPane.INFORMATION_MESSAGE);
            listaSensor.removeAllItems();
            formInternalFrameOpened(null);
            listaSensor.grabFocus();
        }
        else
            JOptionPane.showMessageDialog(rootPane, "Falha ao atualizar as Definições de Monitoramento e Falha do sensor!", "Erro", JOptionPane.ERROR_MESSAGE);
    }
    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        if (txtMedia.getText().length() == 0) {
            JOptionPane.showMessageDialog(rootPane, "Favor informar a média de valores gerados para esse tipo de monitoramento.", "Aviso", WIDTH);
            txtMedia.grabFocus();
        }
        if (txtDiferenca.getText().length() == 0) {
            JOptionPane.showMessageDialog(rootPane, "Favor informar a diferência máxima em % para os valores gerados por esse tipo de monitoramento.", "Aviso", WIDTH);
            txtDiferenca.grabFocus();
        }
        else {
            SensorMonitoramento newSM = new SensorMonitoramento();
            newSM.setIdSensor(mySensores.get(listaSensor.getSelectedIndex()).getIdSensor());
            newSM.setCpf(mySensores.get(listaSensor.getSelectedIndex()).getCpf());
            newSM.setIdTM(mySensores.get(listaSensor.getSelectedIndex()).getIdTM());
            newSM.setIdTF(mySensores.get(listaSensor.getSelectedIndex()).getIdTF());
            newSM.setMedia(Integer.parseInt(txtMedia.getText()));
            newSM.setDiferenca(Integer.parseInt(txtDiferenca.getText()));
            atualizaSM(newSM);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void formInternalFrameOpened(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameOpened
        // TODO add your handling code here:
        tudoCarregado = false;
        SensorDAO mySensorDAO = new SensorDAO();
        TipoMonitoramentoDAO myTMDAO = new TipoMonitoramentoDAO();
        TipoFalhaDAO myTFDAO = new TipoFalhaDAO();
        SensorMonitoramentoDAO mySMDAO = new SensorMonitoramentoDAO();
        mySensores = mySMDAO.getSMs();
        mySensores.stream().forEach((mySensor) -> {
            listaSensor.addItem(mySensorDAO.getNome(mySensor.getIdSensor(),mySensor.getCpf())+" - "+myTMDAO.getNome(mySensor.getIdTM())+" - "+myTFDAO.getNome(mySensor.getIdTF()));
        });
        
        txtMedia.setText(mySensores.get(indice).getMedia().toString());
        txtDiferenca.setText(mySensores.get(indice).getDiferenca().toString());
        
        listaSensor.setSelectedIndex(indice);
        
        listaSensor.grabFocus();
        tudoCarregado = true;
    }//GEN-LAST:event_formInternalFrameOpened

    private void listaSensorItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_listaSensorItemStateChanged
        // TODO add your handling code here:
        if (tudoCarregado) {
            Integer id = listaSensor.getSelectedIndex();
            txtMedia.setText(mySensores.get(id).getMedia().toString());
            txtDiferenca.setText(mySensores.get(id).getDiferenca().toString());
        }
    }//GEN-LAST:event_listaSensorItemStateChanged

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        int id = listaSensor.getSelectedIndex();
        int resposta;
        resposta = JOptionPane.showConfirmDialog(rootPane, "Confirma a exclusão do "+listaSensor.getItemAt(id)+"?","Excluir Tipo Sensor?",JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
        if (resposta == JOptionPane.YES_NO_OPTION) {
            excluiSM(mySensores.get(id).getIdSensor(),mySensores.get(id).getCpf(),mySensores.get(id).getIdTM(),mySensores.get(id).getIdTF());
        }
    }//GEN-LAST:event_jButton2ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JComboBox<String> listaSensor;
    private javax.swing.JTextField txtDiferenca;
    private javax.swing.JTextField txtMedia;
    // End of variables declaration//GEN-END:variables

    private void excluiSM(Integer idSensor, String cpf, Integer idTM, Integer idTF) {
        SensorMonitoramentoDAO myDAO = new SensorMonitoramentoDAO();
        if (myDAO.deleta(idSensor,cpf,idTM,idTF)){
            tudoCarregado = false;
            indice = 0;
            JOptionPane.showMessageDialog(rootPane, "Definições de monitoramento/Falhas excluídas com sucesso!", "Informação", JOptionPane.INFORMATION_MESSAGE);
            listaSensor.removeAllItems();
            formInternalFrameOpened(null);
        }
        else
            JOptionPane.showMessageDialog(rootPane, "Falha ao excluir Registro!", "Erro", JOptionPane.ERROR_MESSAGE);
    }
}
