/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.ufes.gi.ui.redesensor;

import com.ufes.gi.dao.Rede;
import com.ufes.gi.dao.RedeDAO;
import com.ufes.gi.dao.RedeSensores;
import com.ufes.gi.dao.RedeSensoresDAO;
import com.ufes.gi.dao.Sensor;
import com.ufes.gi.dao.SensorDAO;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

/**
 *
 * @author joever
 */
public class ConsultaRedeSensor extends javax.swing.JInternalFrame {
    DefaultListModel myList = new DefaultListModel();
    List<RedeSensores> myRedeSensores = new ArrayList<>();
    List<Sensor> mySensores = new ArrayList<>();
    List<Integer> codRedeSensor = new ArrayList<>();
    List<Integer> listaIndice = new ArrayList<>();
    Integer Indice = 0;
    Integer indiceSensor = 0;
    Boolean carregadoItens = false;
    /**
     * Creates new form CadastroRede
     */
    public ConsultaRedeSensor() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtUnidades = new javax.swing.JTextField();
        txtBateriaInicial = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtTempoAtivo = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txtGastoBateria = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        txtTempoColeta = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        listaRedeSensor = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        listaSensor = new javax.swing.JList<>();
        jLabel10 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        txtCpf = new javax.swing.JFormattedTextField();
        jLabel2 = new javax.swing.JLabel();
        txtCodigo = new javax.swing.JTextField();

        setClosable(true);
        setTitle("Cadastrar Sensor na Rede");
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameOpened(evt);
            }
        });

        jButton1.setText("Atualizar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel4.setText("Número de Unidades: ");

        jLabel5.setText("Nível de Bateria Inicial [%]:");

        jLabel6.setText("Tempo Ativo [s]: ");

        jLabel7.setText("Gasto de Bateria [%/s]: ");

        jLabel8.setText("Tempo entre coletas [s]: ");

        jLabel9.setText("Lista de Redes: ");

        listaRedeSensor.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                listaRedeSensorItemStateChanged(evt);
            }
        });

        listaSensor.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        listaSensor.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                listaSensorValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(listaSensor);

        jLabel10.setText("Sensor (Id - Nome):");

        jButton2.setText("Excluir");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel1.setText("CPF: ");

        try {
            txtCpf.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("###.###.###-##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        jLabel2.setText("Código: ");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(listaRedeSensor, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtUnidades, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtBateriaInicial, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel8)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtTempoColeta, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel10)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtCpf, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jButton1)
                                        .addGap(18, 18, 18)
                                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel6)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtTempoAtivo, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel7)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtGastoBateria, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 20, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(listaRedeSensor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtCpf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(txtCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtUnidades, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(txtBateriaInicial, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(txtTempoAtivo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(txtGastoBateria, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(txtTempoColeta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void atualizaRedeSensor(RedeSensores myRedeSensor){
        RedeSensoresDAO myDAO = new RedeSensoresDAO();
        if (myDAO.atualiza(myRedeSensor)){
            carregadoItens = false;
            Indice = 0;
            indiceSensor = 0;
            JOptionPane.showMessageDialog(rootPane, "Sensor atualizado na Rede com sucesso!", "Informação", JOptionPane.INFORMATION_MESSAGE);
            myList.removeAllElements();
            mySensores = new ArrayList<>();
            codRedeSensor = new ArrayList<>();
            listaSensor.removeAll();
            listaIndice = new ArrayList<>();
            listaRedeSensor.removeAllItems();
            formInternalFrameOpened(null);
        }
        else
            JOptionPane.showMessageDialog(rootPane, "Falha ao atualizar sensor na rede!", "Erro", JOptionPane.ERROR_MESSAGE);
    }
    
    private void excluiRedeSensor(Integer myCodigo, Integer idRede, String myCPF, Integer idSensor){
        RedeSensoresDAO myDAO = new RedeSensoresDAO();
        if (myDAO.deleta(myCodigo,idRede,myCPF,idSensor)){
            carregadoItens = false;
            Indice = 0;
            indiceSensor = 0;
            JOptionPane.showMessageDialog(rootPane, "Sensor excluído da rede com sucesso!", "Informação", JOptionPane.INFORMATION_MESSAGE);
            myList.removeAllElements();
            mySensores = new ArrayList<>();
            codRedeSensor = new ArrayList<>();
            listaSensor.removeAll();
            listaIndice = new ArrayList<>();
            listaRedeSensor.removeAllItems();
            formInternalFrameOpened(null);
        }
        else
            JOptionPane.showMessageDialog(rootPane, "Falha ao excluir sensor da rede!", "Erro", JOptionPane.ERROR_MESSAGE);
    }
    
    private void carregaCampos(){
        // TODO add your handling code here:
        indiceSensor = 0;
        carregadoItens = false;
        
        SensorDAO mySensorDAO = new SensorDAO();

        Integer idRedeSelecionada = myRedeSensores.get(Indice).getIdRede();
        
        mySensores = new ArrayList<>();
        codRedeSensor = new ArrayList<>();
        myList.removeAllElements();
        listaSensor.removeAll();
        listaSensor.repaint();
        
        myRedeSensores.stream().filter((myRedeSensor) -> (Objects.equals(idRedeSelecionada, myRedeSensor.getIdRede()))).forEach((myRedeSensor) -> {
            Sensor mySensor;
            mySensor = mySensorDAO.getSensor(myRedeSensor.getIdSensor(),myRedeSensor.getCpf());
            mySensores.add(mySensor);
            codRedeSensor.add(myRedeSensor.getIdRedeSensor());
            myList.addElement(mySensor.getIdSensor()+" - "+mySensor.getNome());
        });
        
        listaSensor.setModel(myList);
        txtCpf.setText(myRedeSensores.get(Indice).getCpf());
        txtCpf.setEditable(false);
        txtCodigo.setText(myRedeSensores.get(Indice).getIdRedeSensor().toString());
        txtCodigo.setEditable(false);
        txtUnidades.setText(myRedeSensores.get(Indice).getUnidades().toString());
        txtBateriaInicial.setText(myRedeSensores.get(Indice).getBateriaInicial().toString());
        txtTempoAtivo.setText(myRedeSensores.get(Indice).getTempoAtivo().toString());
        txtGastoBateria.setText(myRedeSensores.get(Indice).getGastoBateria().toString());
        txtTempoColeta.setText(myRedeSensores.get(Indice).getTempoColeta().toString());
        carregadoItens = true;
    }
    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        String gastoBateria = txtGastoBateria.getText();
        gastoBateria = gastoBateria.replace(",", ".");
        if (txtUnidades.getText().length() == 0) {
            JOptionPane.showMessageDialog(rootPane, "Favor informar o Número de unidades desse sensor para a Rede.", "Aviso", WIDTH);
            txtUnidades.grabFocus();
        }
        if (txtBateriaInicial.getText().length() == 0) {
            JOptionPane.showMessageDialog(rootPane, "Favor informar o nível de bateria inicial desse sensor para a Rede.", "Aviso", WIDTH);
            txtBateriaInicial.grabFocus();
        }
        if (txtTempoAtivo.getText().length() == 0) {
            JOptionPane.showMessageDialog(rootPane, "Favor informar o tempo que esse sensor ficou ativo.", "Aviso", WIDTH);
            txtTempoAtivo.grabFocus();
        }
        if (txtGastoBateria.getText().length() == 0) {
            JOptionPane.showMessageDialog(rootPane, "Favor informar o gasto de bateria desse sensor.", "Aviso", WIDTH);
            txtGastoBateria.grabFocus();
        }
        if (txtTempoColeta.getText().length() == 0) {
            JOptionPane.showMessageDialog(rootPane, "Favor informar o entre coletas desse sensor na rede.", "Aviso", WIDTH);
            txtTempoColeta.grabFocus();
        }
        else {
            RedeSensores newRedeSensor = new RedeSensores();
            newRedeSensor.setIdRedeSensor(Integer.parseInt(txtCodigo.getText()));
            newRedeSensor.setIdRede(myRedeSensores.get(Indice).getIdRede());
            newRedeSensor.setCpf(myRedeSensores.get(Indice).getCpf());
            newRedeSensor.setIdSensor(mySensores.get(listaSensor.getSelectedIndex()).getIdSensor());
            newRedeSensor.setUnidades(Integer.parseInt(txtUnidades.getText()));
            newRedeSensor.setBateriaInicial(Integer.parseInt(txtBateriaInicial.getText()));
            newRedeSensor.setTempoAtivo(Integer.parseInt(txtTempoAtivo.getText()));
            newRedeSensor.setGastoBateria(Double.parseDouble(gastoBateria));
            newRedeSensor.setTempoColeta(Integer.parseInt(txtTempoColeta.getText()));
            atualizaRedeSensor(newRedeSensor);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void formInternalFrameOpened(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameOpened
        // TODO add your handling code here:
        carregadoItens = false;
        RedeSensoresDAO myDAO = new RedeSensoresDAO();
        myRedeSensores = myDAO.getRedesSensores();
        
        RedeDAO myRedeDAO = new RedeDAO();
        
        SensorDAO mySensorDAO = new SensorDAO();
        
        Integer idRede = 0;
        Integer idRedeSelecionada = myRedeSensores.get(Indice).getIdRede();
        
        for (RedeSensores myRedeSensor : myRedeSensores){
            if (!Objects.equals(idRede, myRedeSensor.getIdRede())) {
                idRede = myRedeSensor.getIdRede();
                Rede myRede;
                listaIndice.add(myRedeSensores.lastIndexOf(myRedeSensor));
                myRede = myRedeDAO.getRede(myRedeSensor.getIdRede(),myRedeSensor.getCpf());
                listaRedeSensor.addItem(myRede.getNome());
            }
            if (Objects.equals(idRedeSelecionada, myRedeSensor.getIdRede())) {
                Sensor mySensor;
                mySensor = mySensorDAO.getSensor(myRedeSensor.getIdSensor(),myRedeSensor.getCpf());
                mySensores.add(mySensor);
                codRedeSensor.add(myRedeSensor.getIdRedeSensor());
                myList.addElement(mySensor.getIdSensor()+" - "+mySensor.getNome());
            }
        }
        
        listaSensor.setModel(myList);
        txtCpf.setText(myRedeSensores.get(Indice).getCpf());
        txtCpf.setEditable(false);
        txtCodigo.setText(myRedeSensores.get(Indice).getIdRedeSensor().toString());
        txtCodigo.setEditable(false);
        txtUnidades.setText(myRedeSensores.get(Indice).getUnidades().toString());
        txtBateriaInicial.setText(myRedeSensores.get(Indice).getBateriaInicial().toString());
        txtTempoAtivo.setText(myRedeSensores.get(Indice).getTempoAtivo().toString());
        txtGastoBateria.setText(myRedeSensores.get(Indice).getGastoBateria().toString());
        txtTempoColeta.setText(myRedeSensores.get(Indice).getTempoColeta().toString());
        listaSensor.setSelectedIndex(indiceSensor);
        carregadoItens = true;
    }//GEN-LAST:event_formInternalFrameOpened

    private void listaSensorValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_listaSensorValueChanged
        // TODO add your handling code here:
        if (carregadoItens) {
            String cpf = txtCpf.getText();
            cpf = cpf.replace(".", "");
            cpf = cpf.replace("-", "");
            Integer id = listaSensor.getSelectedIndex();
            txtCodigo.setText(codRedeSensor.get(id).toString());
            for (RedeSensores myRedeSensor : myRedeSensores){
                if (Objects.equals(Integer.parseInt(txtCodigo.getText()), myRedeSensor.getIdRedeSensor()) && Objects.equals(mySensores.get(id).getIdSensor(), myRedeSensor.getIdSensor()) && cpf.equals(myRedeSensor.getCpf())) {
                    txtUnidades.setText(myRedeSensor.getUnidades().toString());
                    txtBateriaInicial.setText(myRedeSensor.getBateriaInicial().toString());
                    txtTempoAtivo.setText(myRedeSensor.getTempoAtivo().toString());
                    txtGastoBateria.setText(myRedeSensor.getGastoBateria().toString());
                    txtTempoColeta.setText(myRedeSensor.getTempoColeta().toString());
                }
            }
        }
    }//GEN-LAST:event_listaSensorValueChanged

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        String cpf = txtCpf.getText();
        cpf = cpf.replace(".", "");
        cpf = cpf.replace("-", "");
        int resposta;
        resposta = JOptionPane.showConfirmDialog(rootPane, "Confirma a exclusão do Sensor "+mySensores.get(listaSensor.getSelectedIndex()).getNome()+"?","Excluir Tipo Sensor?",JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
        if (resposta == JOptionPane.YES_NO_OPTION) {
            excluiRedeSensor(Integer.parseInt(txtCodigo.getText()),myRedeSensores.get(Indice).getIdRede(),cpf,mySensores.get(listaSensor.getSelectedIndex()).getIdSensor());
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void listaRedeSensorItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_listaRedeSensorItemStateChanged
        // TODO add your handling code here:
        if (carregadoItens) {
            Indice = listaIndice.get(listaRedeSensor.getSelectedIndex());
            carregaCampos();
        }
    }//GEN-LAST:event_listaRedeSensorItemStateChanged


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox<String> listaRedeSensor;
    private javax.swing.JList<String> listaSensor;
    private javax.swing.JTextField txtBateriaInicial;
    private javax.swing.JTextField txtCodigo;
    private javax.swing.JFormattedTextField txtCpf;
    private javax.swing.JTextField txtGastoBateria;
    private javax.swing.JTextField txtTempoAtivo;
    private javax.swing.JTextField txtTempoColeta;
    private javax.swing.JTextField txtUnidades;
    // End of variables declaration//GEN-END:variables
}
