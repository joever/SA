/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.ufes.gi.ui.sensor;

import com.ufes.gi.dao.ModeloSensor;
import com.ufes.gi.dao.ModeloSensorDAO;
import com.ufes.gi.dao.Sensor;
import com.ufes.gi.dao.SensorDAO;
import com.ufes.gi.dao.TipoSensor;
import com.ufes.gi.dao.TipoSensorDAO;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import javax.swing.JOptionPane;

/**
 *
 * @author joever
 */
public class ConsultaSensor extends javax.swing.JInternalFrame {
    List<TipoSensor> myTSs = new ArrayList<>();
    List<ModeloSensor> myMSs = new ArrayList<>();
    List<Sensor> mySensores = new ArrayList<>();
    Integer indice = 0;
    Boolean carregadoLista = false;
    /**
     * Creates new form CadastroSensor
     */
    public ConsultaSensor() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtCodigo = new javax.swing.JTextField();
        txtNome = new javax.swing.JTextField();
        listaTS = new javax.swing.JComboBox<>();
        listaMS = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtCpf = new javax.swing.JFormattedTextField();
        listaSensor = new javax.swing.JComboBox<>();
        jButton2 = new javax.swing.JButton();

        setClosable(true);
        setTitle("Consultar/Alterar/Excluir Sensor");
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameOpened(evt);
            }
        });

        jLabel1.setText("CÃ³digo: ");

        jLabel2.setText("Tipo Sensor: ");

        jLabel3.setText("Modelo Sensor: ");

        jLabel4.setText("Nome: ");

        jButton1.setText("Atualizar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel5.setText("Lista: ");

        jLabel6.setText("CPF: ");

        try {
            txtCpf.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("###.###.###-##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        listaSensor.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                listaSensorItemStateChanged(evt);
            }
        });

        jButton2.setText("Excluir");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(listaTS, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(listaMS, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtCpf, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtNome, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 184, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(listaSensor, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(102, 102, 102)
                .addComponent(jButton1)
                .addGap(18, 18, 18)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(listaSensor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(txtCpf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(listaTS, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(listaMS, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addContainerGap(15, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void setPos(){
        Integer ind = listaSensor.getSelectedIndex();
        Integer i = 0;
        for (TipoSensor myTS : myTSs){
            if (Objects.equals(myTS.getIdTipoSensor(), mySensores.get(ind).getIdTipoSensor()))
                listaTS.setSelectedIndex(i);
            i++;
        }
        
        i = 0;
        for (ModeloSensor myMS : myMSs){
            if (Objects.equals(myMS.getIdModeloSensor(), mySensores.get(ind).getIdModeloSensor()))
                listaMS.setSelectedIndex(i);
            i++;
        }
    }
    
    private void alteraSensor(Sensor mySensor){
        SensorDAO myDAO = new SensorDAO();
        if (myDAO.atualiza(mySensor)){
            carregadoLista = false;
            indice = listaSensor.getSelectedIndex();
            JOptionPane.showMessageDialog(rootPane, "Sensor atualizado com sucesso!", "InformaÃ§Ã£o", JOptionPane.INFORMATION_MESSAGE);
            listaSensor.removeAllItems();
            formInternalFrameOpened(null);
            txtNome.grabFocus();
        }
        else
            JOptionPane.showMessageDialog(rootPane, "Falha ao atualizar sensor!", "Erro", JOptionPane.ERROR_MESSAGE);
    }
    
    private void excluiSensor(Integer myCodigo, String myCpf){
        SensorDAO myDAO = new SensorDAO();
        if (myDAO.deleta(myCodigo,myCpf)){
            carregadoLista = false;
            indice = 0;
            JOptionPane.showMessageDialog(rootPane, "Tipo de Monitoramento excluÃ­do com sucesso!", "InformaÃ§Ã£o", JOptionPane.INFORMATION_MESSAGE);
            listaSensor.removeAllItems();
            formInternalFrameOpened(null);
            txtNome.grabFocus();
        }
        else
            JOptionPane.showMessageDialog(rootPane, "Falha ao excluir tipo de Monitoramento!", "Erro", JOptionPane.ERROR_MESSAGE);
    }
    
    private void formInternalFrameOpened(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameOpened
        // TODO add your handling code here:
        SensorDAO myDAO = new SensorDAO();
        mySensores = myDAO.getSensores();
        mySensores.stream().forEach((mySensor) -> {
            listaSensor.addItem(mySensor.getNome());
        });

        txtCodigo.setEditable(false);
        txtCpf.setEditable(false);
        txtCodigo.setText(mySensores.get(indice).getIdSensor().toString());
        txtCpf.setText(mySensores.get(indice).getCpf());
        txtNome.setText(mySensores.get(indice).getNome());
        listaSensor.setSelectedIndex(indice);
        
        if (listaTS.getItemCount() == 0) {
            TipoSensorDAO myTSDAO = new TipoSensorDAO();
            myTSs = myTSDAO.getTiposSensor();
            myTSs.stream().forEach((myTS) -> {
                listaTS.addItem(myTS.getNome());
            });
        }
        
        if (listaMS.getItemCount() == 0) {
            ModeloSensorDAO myMSDAO = new ModeloSensorDAO();
            myMSs = myMSDAO.getModeloSensores();
            myMSs.stream().forEach((myMS) -> {
                listaMS.addItem(myMS.getNome());
            });
        }
        
        setPos();
        carregadoLista = true;
    }//GEN-LAST:event_formInternalFrameOpened

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        String cpf = txtCpf.getText();
        cpf = cpf.replace(".", "");
        cpf = cpf.replace("-", "");
        if (txtNome.getText().length() == 0) {
            JOptionPane.showMessageDialog(rootPane, "Favor informar o Nome para o Sensor.", "Aviso", WIDTH);
            txtNome.grabFocus();
        }
        else {
            Sensor newSensor = new Sensor();
            newSensor.setIdSensor(Integer.parseInt(txtCodigo.getText()));
            newSensor.setNome(txtNome.getText());
            newSensor.setCpf(cpf);
            newSensor.setIdTipoSensor(myTSs.get(listaTS.getSelectedIndex()).getIdTipoSensor());
            newSensor.setIdModeloSensor(myMSs.get(listaMS.getSelectedIndex()).getIdModeloSensor());
            alteraSensor(newSensor);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void listaSensorItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_listaSensorItemStateChanged
        // TODO add your handling code here:
        Integer id = listaSensor.getSelectedIndex();
        if (carregadoLista) {
            txtCodigo.setText(mySensores.get(id).getIdSensor().toString());
            txtCpf.setText(mySensores.get(id).getCpf());
            txtNome.setText(mySensores.get(id).getNome());
            setPos();
        }
    }//GEN-LAST:event_listaSensorItemStateChanged

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        String cpf = txtCpf.getText();
        cpf = cpf.replace(".", "");
        cpf = cpf.replace("-", "");
        int resposta;
        resposta = JOptionPane.showConfirmDialog(rootPane, "Confirma a exclusÃ£o do Sensor "+txtNome.getText()+"?","Excluir Sensor?",JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
        if (resposta == JOptionPane.YES_NO_OPTION) {
            excluiSensor(Integer.parseInt(txtCodigo.getText()),cpf);
        }
    }//GEN-LAST:event_jButton2ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JComboBox<String> listaMS;
    private javax.swing.JComboBox<String> listaSensor;
    private javax.swing.JComboBox<String> listaTS;
    private javax.swing.JTextField txtCodigo;
    private javax.swing.JFormattedTextField txtCpf;
    private javax.swing.JTextField txtNome;
    // End of variables declaration//GEN-END:variables
}
