/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.ufes.gi.ui.controlegi;

import com.ufes.gi.dao.ControleRede;
import com.ufes.gi.dao.ControleRedeDAO;
import com.ufes.gi.dao.ModeloSensorDAO;
import com.ufes.gi.dao.Rede;
import com.ufes.gi.dao.RedeDAO;
import com.ufes.gi.dao.RedeSensores;
import com.ufes.gi.dao.RedeSensoresDAO;
import com.ufes.gi.dao.SensorDAO;
import com.ufes.gi.dao.SensorMonitoramento;
import com.ufes.gi.dao.SensorMonitoramentoDAO;
import com.ufes.gi.dao.TipoMonitoramentoDAO;
import com.ufes.gi.xml.SaidaRede;
import com.ufes.gi.xml.SaidaRedeXML;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;
import java.util.Objects;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

/**
 *
 * @author joever
 */
public class ControleGI extends javax.swing.JInternalFrame {
    List<Rede> myRedes;
    List<RedeSensores> MyRedeSensores;
    List<JLabel> myImgSensores = new ArrayList<>();
    ControleRede myCR;
    Boolean carregado = false;
    Integer indice = 0;
    Thread myThread;
    List<Integer> SensoresAtivos = new ArrayList<>();
    Integer indRede = 0;
    Integer indSensor = 0;
    Integer nSensores = 0;
    Boolean cargaThredsCompleta = false;
    ControleRedeDAO myCRDAO = new ControleRedeDAO();
    SensorMonitoramentoDAO mySMDAO = new SensorMonitoramentoDAO();
    RedeDAO myRedeDAO = new RedeDAO();
    SensorDAO mySensorDAO = new SensorDAO();
    TipoMonitoramentoDAO myTMDAO = new TipoMonitoramentoDAO();
    RedeSensoresDAO myRSDAO = new RedeSensoresDAO();
    /**
     * Creates new form ControleGI
     */
    public ControleGI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        listaRede = new javax.swing.JComboBox<>();
        btIniciar = new javax.swing.JButton();
        btParar = new javax.swing.JButton();
        painel = new javax.swing.JPanel();
        barra = new javax.swing.JProgressBar();

        setClosable(true);
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameOpened(evt);
            }
        });

        jLabel1.setText("Lista Rede: ");

        listaRede.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                listaRedeItemStateChanged(evt);
            }
        });

        btIniciar.setText("Iniciar");
        btIniciar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btIniciarActionPerformed(evt);
            }
        });

        btParar.setText("Parar");
        btParar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btPararActionPerformed(evt);
            }
        });

        painel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Vis√£o da Rede", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));

        javax.swing.GroupLayout painelLayout = new javax.swing.GroupLayout(painel);
        painel.setLayout(painelLayout);
        painelLayout.setHorizontalGroup(
            painelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 362, Short.MAX_VALUE)
        );
        painelLayout.setVerticalGroup(
            painelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 258, Short.MAX_VALUE)
        );

        barra.setString("");
        barra.setStringPainted(true);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(painel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(listaRede, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(46, 46, 46)
                                .addComponent(btIniciar)
                                .addGap(18, 18, 18)
                                .addComponent(btParar, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 127, Short.MAX_VALUE))))
                    .addComponent(barra, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(listaRede, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(painel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(barra, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btIniciar)
                    .addComponent(btParar))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formInternalFrameOpened(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameOpened
        // TODO add your handling code here:
        carregado = false;
        myRedes = myRedeDAO.getRedes();
        myRedes.stream().forEach((myRede) -> {
            listaRede.addItem(myRede.getNome());
        });
        
        if (MyRedeSensores != null)
            MyRedeSensores.removeAll(MyRedeSensores);
        MyRedeSensores =  new ArrayList<>();
        MyRedeSensores = myRSDAO.getRedesSensores(myRedes.get(indice).getIdRede(),myRedes.get(indice).getCpf());
        
        SensorDAO mySDAO = new SensorDAO();
        ModeloSensorDAO myMSDAO = new ModeloSensorDAO();
        Integer x = painel.getX();
        Integer y = painel.getY();
        
        for (RedeSensores mySensor : MyRedeSensores){
            Integer idTS = mySDAO.getIdTS(mySensor.getIdSensor(),myRedes.get(indice).getCpf());
            Integer nSensoresLocal = myMSDAO.getNSensor(mySDAO.getIdMS(mySensor.getIdSensor(),myRedes.get(indice).getCpf()));
            JLabel myImgSensor = new JLabel();
            myImgSensor.setText("Qt: "+mySensor.getUnidades().toString());
            myImgSensor.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
            myImgSensor.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
            painel.add(myImgSensor);
            myImgSensor.setSize(70, 100);
            //myImgSensor.setLocation(painel.getLocation());
            myImgSensor.setLocation(x, y);
            myImgSensor.setIcon(new javax.swing.ImageIcon(identificaIMG(idTS,nSensoresLocal)));

            myImgSensor.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
                public void mouseDragged(java.awt.event.MouseEvent evt) {
                    moveSensor(evt);
                }
            });

            myImgSensores.add(myImgSensor);
            if (x == painel.getX() + 300) {
                x = painel.getX();
                y = y + 250;
            }
            else
                x = x + 100;
        }
        myCR = myCRDAO.getRede(myRedes.get(indice).getIdRede(),myRedes.get(indice).getCpf());
        listaRede.setSelectedIndex(indice);
        if (myCR.getSituacao() == null) {
            barra.setString("");
            barra.setIndeterminate(false);
            btIniciar.setEnabled(true);
            btParar.setEnabled(false);
        }
        else if (myCR.getSituacao() == 1){
            barra.setString("");
            if (myCR.getAcaoParar() == 1)
                barra.setString("Parando a gera√ß√£o ...");
            barra.setIndeterminate(true);
            btIniciar.setEnabled(false);
            btParar.setEnabled(true);
        }
        else {
            barra.setString("");
            if (myCR.getAcaoParar() == 1)
                barra.setString("Parando a gera√ß√£o ...");
            barra.setIndeterminate(false);
            btIniciar.setEnabled(true);
            btParar.setEnabled(false);
        }
        carregado = true;
    }//GEN-LAST:event_formInternalFrameOpened

    private void btIniciarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btIniciarActionPerformed
        // TODO add your handling code here:
        int resposta;
        resposta = JOptionPane.showConfirmDialog(rootPane, "Zerar o tempo total que os sensores ficaram ativos?","Zerar tempo ativo sensor?",JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
        if (resposta == JOptionPane.YES_NO_OPTION) {
            myRSDAO.zeraTempoAtivo(myRedes.get(listaRede.getSelectedIndex()).getIdRede(), myRedes.get(listaRede.getSelectedIndex()).getCpf());
            if (MyRedeSensores != null)
                MyRedeSensores.removeAll(MyRedeSensores);
            MyRedeSensores =  new ArrayList<>();
            MyRedeSensores = myRSDAO.getRedesSensores(myRedes.get(listaRede.getSelectedIndex()).getIdRede(), myRedes.get(listaRede.getSelectedIndex()).getCpf());
        }
        listaRede.setEnabled(false);
        Boolean isCarregado = false;
        if (myCR.getSituacao() == null){
            myCR.setIdRede(myRedes.get(listaRede.getSelectedIndex()).getIdRede());
            myCR.setCpf(myRedes.get(listaRede.getSelectedIndex()).getCpf());
            myCR.setSituacao(1);
            myCR.setAcaoParar(0);
            if (myCRDAO.adiciona(myCR))
                isCarregado = true;
            else
                JOptionPane.showMessageDialog(rootPane, "Falha ao criar Controle para Rede!", "Erro", JOptionPane.ERROR_MESSAGE);
        } else {
            myCR.setSituacao(1);
            myCR.setAcaoParar(0);
            if (myCRDAO.atualiza(myCR))
                isCarregado = true;
            else
                JOptionPane.showMessageDialog(rootPane, "Falha ao atualizar Controle para Rede!", "Erro", JOptionPane.ERROR_MESSAGE);
        }
        if (isCarregado) {
            barra.setIndeterminate(true);
            btIniciar.setEnabled(false);
            btParar.setEnabled(true);
            myThread = new Thread() {
                @Override
                public void run() {
                    try {
                        nSensores = 0;
                        indRede = SensoresAtivos.size();
                        SensoresAtivos.add(indRede,nSensores);
                        //System.out.println("Iniciado Thread "+indRede);
                        indSensor = 0;
                        cargaThredsCompleta = false;
                        for (RedeSensores mySensor : MyRedeSensores){
                            for (int n = 0;n < mySensor.getUnidades();n++) {
                                //System.out.println("Iniciado Thread Sensor: "+ nSensores+"Indice Sensor: "+indSensor);
                                //
                                nSensores = SensoresAtivos.get(indRede) + 1;
                                SensoresAtivos.add(indRede,nSensores);
                                Thread newThread = new Thread() {
                                    @Override
                                    public void run() {
                                        try {
                                            //System.out.println("PosN√∫meroSensor: "+indRede);
                                            //System.out.println("idRede: "+myRedes.get(listaRede.getSelectedIndex()).getIdRede());
                                            //System.out.println("CPF: "+myRedes.get(listaRede.getSelectedIndex()).getCpf());
                                            //System.out.println("Caminho: "+myRedes.get(listaRede.getSelectedIndex()).getCaminhoXML());
                                            //System.out.println("IdRedeSensor: "+indSensor);
                                            //System.out.println("IdSensor: "+MyRedeSensores.get(indSensor).getIdSensor());
                                            geraXML(indRede, myRedes.get(listaRede.getSelectedIndex()).getIdRede(), myRedes.get(listaRede.getSelectedIndex()).getCpf(), myRedes.get(listaRede.getSelectedIndex()).getCaminhoXML(), MyRedeSensores.get(indSensor));
                                        } catch (InterruptedException ex) {
                                            Logger.getLogger(ControleGI.class.getName()).log(Level.SEVERE, null, ex);
                                        }
                                    }
                                };
                                newThread.start();
                                Thread.sleep(1000);
                                //
                            }
                            indSensor++;
                        }
                        cargaThredsCompleta = true;
                        if (SensoresAtivos.get(indRede) == 0){
                            ControleRede myCR = myCRDAO.getRede(MyRedeSensores.get(listaRede.getSelectedIndex()).getIdRede(), MyRedeSensores.get(listaRede.getSelectedIndex()).getCpf());
                            myCR.setAcaoParar(1);
                            if (myCRDAO.atualiza(myCR)) {
                                btParar.setEnabled(false);
                                barra.setString("Parando a gera√ß√£o ...");
                            }
                        }
                        //SensoresAtivos.add(indRede,nSensores);
                        ControleSensores(indRede,myRedes.get(listaRede.getSelectedIndex()).getIdRede(), myRedes.get(listaRede.getSelectedIndex()).getCpf());
                    } catch (InterruptedException ex) {
                        Logger.getLogger(ControleGI.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    //System.out.println("Finalizado Thread.");
                }
            };
            myThread.start();
        }
        listaRede.setEnabled(true);
    }//GEN-LAST:event_btIniciarActionPerformed

    private void listaRedeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_listaRedeItemStateChanged
        // TODO add your handling code here:
        if (carregado){
            indice = listaRede.getSelectedIndex();
            carregado = false;
            if (myImgSensores.size() > 0)
                myImgSensores.stream().forEach((myIMG) -> {
                    myIMG.setVisible(false);
                    myIMG.removeAll();
            });
            myImgSensores = new ArrayList<>();
            listaRede.removeAllItems();
            formInternalFrameOpened(null);
        }
    }//GEN-LAST:event_listaRedeItemStateChanged

    private void btPararActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btPararActionPerformed
        // TODO add your handling code here:
        myCR.setAcaoParar(1);
        if (myCRDAO.atualiza(myCR)) {
            btParar.setEnabled(false);
            barra.setString("Parando a gera√ß√£o ...");
        }
        else
            JOptionPane.showMessageDialog(rootPane, "Falha ao atualizar Controle para Rede!", "Erro", JOptionPane.ERROR_MESSAGE);
    }//GEN-LAST:event_btPararActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JProgressBar barra;
    private javax.swing.JButton btIniciar;
    private javax.swing.JButton btParar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JComboBox<String> listaRede;
    private javax.swing.JPanel painel;
    // End of variables declaration//GEN-END:variables
    
    private void moveSensor(java.awt.event.MouseEvent evt) {                                         
        // TODO add your handling code here:
        evt.getComponent().setLocation(evt.getX(), evt.getY());
        //evt.getComponent().repaint();
    }
    
    private String identificaIMG(Integer idTS, Integer nSensores){
        String img = "";
        Integer n = nSensores;
        if (n > 3)
            n = 3;
        if (null != idTS)
            switch (idTS) {
            case 1:
                img = "img\\nGatewayWireless"+n+".png";
                break;
            case 2:
                img = "img\\nGatewayUSB"+n+".png";
                break;
            default:
                img = "img\\nSensor"+n+".png";
                break;
        }
        return img;
    }
    
    private void geraXML(Integer pos, Integer idRede, String cpf, String caminho, RedeSensores mySensor) throws InterruptedException{
        ControleRede myCRT = myCRDAO.getRede(idRede, cpf);
        
        Calendar dtInicio = Calendar.getInstance();
        SimpleDateFormat formatDtHr = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
        
        Integer tempo = mySensor.getTempoColeta()*1000;
        
        List<SensorMonitoramento> mySMs = mySMDAO.getSM(mySensor.getIdSensor(), cpf);        
        
        SaidaRedeXML myXML = new SaidaRedeXML();
        
        while (true){
            Calendar dtAtual = Calendar.getInstance();
            Long temp = (dtAtual.getTimeInMillis() - dtInicio.getTimeInMillis())/1000;
            Long tempoTotalLigado = temp + mySensor.getTempoAtivo();
            Double nivelUtilizacaoBateria = tempoTotalLigado*mySensor.getGastoBateria();
            if ((myCRDAO.getAcaoParar(idRede, cpf) == 1) || ((mySensor.getBateriaInicial() - nivelUtilizacaoBateria) <= 0 && mySensor.getGastoBateria() > 0)){
                int tmpLigado = (int) (100/mySensor.getGastoBateria());
                mySensor.setTempoAtivo(tmpLigado);
                myRSDAO.atualiza(mySensor);
                System.out.print("Pos: "+pos);
                SensoresAtivos.set(pos, SensoresAtivos.get(pos)-1);
                if (SensoresAtivos.get(pos) <= 0 && cargaThredsCompleta){
                    myCRT.setAcaoParar(1);
                    if (myCRDAO.atualiza(myCRT)) {
                        btParar.setEnabled(false);
                        barra.setString("Parando a gera√ß√£o ...");
                    }
                }
                return;
            }
            mySMs.stream().forEach((mySM) -> {
                if (mySM.getMedia() > 0){
                    Double valor;
                    Double dif;
                    Double limiteInf;
                    Double limiteSup;
                    if (mySM.getIdTF() == 3) {
                        dif = ((mySM.getDiferenca().doubleValue()/100)*mySM.getMedia());
                        limiteInf = mySM.getMedia().doubleValue() - dif;
                        limiteSup = (dif*2) + 0.1;
                        valor = limiteInf + (limiteSup*Math.random());
                    }
                    else {
                        Double fatorFalha = (Math.random() * 101) / 100;
                        dif = ((mySM.getDiferenca().doubleValue()/100)*mySM.getMedia());
                        limiteInf = mySM.getMedia().doubleValue() - dif;
                        limiteSup = (dif*2) + 0.1;
                        valor = limiteInf + (limiteSup*Math.random());
                        if (Math.random() >= 0.5)
                            valor = valor + fatorFalha*valor;
                        else
                            valor = valor - fatorFalha*valor;
                    }
                    //System.out.println("Rede: "+idRede+" CodSensor: "+codSensor+" Sensor: "+mySM.getIdSensor()+"M√©dia: "+mySM.getMedia().doubleValue()+"Diferen√ßa"+mySM.getDiferenca().doubleValue()+" Valor: "+valor);
                    //
                    Calendar dtGerado = Calendar.getInstance();
                    SaidaRede mySR = new SaidaRede(idRede,myRedeDAO.getNomeRede(idRede, cpf),mySM.getIdSensor(),mySensorDAO.getNome(mySM.getIdSensor(), cpf),mySM.getIdTM(),myTMDAO.getNome(mySM.getIdTM()),cpf,formatDtHr.format(dtGerado.getTime()),"",valor.toString(),"","","","","","");
                    myXML.GeraXML(mySR, caminho);
                }
                //
            });
            Thread.sleep(tempo);
        }
    }
    
    private void ControleSensores(Integer pos, Integer idRede, String cpf) throws InterruptedException{
        ControleRede myCRT = myCRDAO.getRede(idRede, cpf);
        while (true){
            if (myCRDAO.getAcaoParar(idRede, cpf) == 1 && SensoresAtivos.get(pos) == 0){
                myCRT.setSituacao(0);
                myCRT.setAcaoParar(0);
                myCRDAO.atualiza(myCRT);
                if (Objects.equals(idRede, myRedes.get(listaRede.getSelectedIndex()).getIdRede()) && cpf.equals(myRedes.get(listaRede.getSelectedIndex()).getCpf())){
                    barra.setIndeterminate(false);
                    btIniciar.setEnabled(true);
                    btParar.setEnabled(false);
                    barra.setString("");
                }
                return;
            }
            Thread.sleep(10000);
        }
    }
}
